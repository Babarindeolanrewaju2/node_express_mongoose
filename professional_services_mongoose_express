const mongoose = require('mongoose');

const ServiceSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    description: {
        type: String,
        required: true
    },
    price: {
        type: Number,
        required: true
    },
    image: {
        type: String,
    }
});

const Service = mongoose.model('Service', ServiceSchema);

module.exports = Service;

const mongoose = require('mongoose');
const Service = require('./service');

const ProfessionalSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    description: {
        type: String,
        required: true
    },
    skills: {
        type: [String],
        required: true
    },
    image: {
        type: String,
    },
    services: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Service'
    }]
});

const Professional = mongoose.model('Professional', ProfessionalSchema);

module.exports = Professional;

const mongoose = require('mongoose');
const Professional = require('./professional');
const Service = require('./service');
const User = require('./user');

const AppointmentSchema = new mongoose.Schema({
    service: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Service',
        required: true
    },
    professional: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Professional',
        required: true
    },
    client: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    date: {
        type: Date,
        required: true
    },
    time: {
        type: String,
        required: true
    }
});

const Appointment = mongoose.model('Appointment', AppointmentSchema);

module.exports = Appointment;

const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true,
        unique: true
    },
    password: {
        type: String,
        required: true
    },
    role: {
        type: String,
        required: true
    }
});

const User = mongoose.model('User', UserSchema);

module.exports = User;

const mongoose = require('mongoose');
const Professional = require('./professional');
const Service = require('./service');
const User = require('./user');

const PaymentSchema = new mongoose.Schema({
    service: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Service',
        required: true
    },
    professional: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Professional',
        required: true
    },
    client: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    date: {
        type: Date,
        default: Date.now
    },
    amount: {
        type: Number,
        required: true
    }
});

const Payment = mongoose.model('Payment', PaymentSchema);

module.exports = Payment;


const express = require('express');
const router = express.Router();
const Service = require('../models/service');

// Get all services
router.get('/', async (req, res) => {
    try {
        const services = await Service.find();
        res.json(services);
    } catch (err) {
        res.status(500).json({
            message: err.message
        });
    }
});

// Get one service
router.get('/:id', getService, (req, res) => {
    res.json(res.service);
});

// Create one service
router.post('/', async (req, res) => {
    const service = new Service({
        name: req.body.name,
        description: req.body.description,
        price: req.body.price,
        image: req.body.image
    });
    try {
        const newService = await service.save();
        res.status(201).json(newService);
    } catch (err) {
        res.status(400).json({
            message: err.message
        });
    }
});

// Update one service
router.patch('/:id', getService, async (req, res) => {
    if (req.body.name != null) {
        res.service.name = req.body.name;
    }
    if (req.body.description != null) {
        res.service.description = req.body.description;
    }
    if (req.body.price != null) {
        res.service.price = req.body.price;
    }
    if (req.body.image != null) {
        res.service.image = req.body.image;
    }
    try {
        const updatedService = await res.service.save();
        res.json(updatedService);
    } catch (err) {
        res.status(400).json({
            message: err.message
        });
    }
});

// Delete one service
router.delete('/:id', getService, async (req, res) => {
    try {
        await res.service.remove();
        res.json({
            message: 'Deleted Service'
        });
    } catch (err) {
        res.status(500).json({
            message: err.message
        });
    }
});

async function getService(req, res, next) {
    try {
        service = await Service.findById(req.params.id);
        if (service == null) {
            return res.status(404).json({
                message: 'Cannot find service'
            });
        }
    } catch (err) {
        return res.status(500).json({
            message: err.message
        });
    }

    res.service = service;
    next();
}

module.exports = router;

const express = require('express');
const router = express.Router();
const Appointment = require('../models/appointment');
const Service = require('../models/service');
const Professional = require('../models/professional');

const User = require('../models/user');

// Get all appointments
router.get('/', async (req, res) => {
    try {
        const appointments = await Appointment.find().populate('service').populate('professional').populate('client');
        res.json(appointments);
    } catch (err) {
        res.status(500).json({
            message: err.message
        });
    }
});

// Get one appointment
router.get('/:id', getAppointment, (req, res) => {
    res.json(res.appointment);
});

// Create one appointment
router.post('/', async (req, res) => {
    const service = await Service.findById(req.body.service);
    const professional = await Professional.findById(req.body.professional);
    const client = await User.findById(req.body.client);
    const appointment = new Appointment({
        service: service,
        professional: professional,
        client: client,
        date: req.body.date,
        time: req.body.time
    });
    try {
        const newAppointment = await appointment.save();
        res.status(201).json(newAppointment);
    } catch (err) {
        res.status(400).json({
            message: err.message
        });
    }
});

// Update one appointment
router.patch('/:id', getAppointment, async (req, res) => {
    if (req.body.date != null) {
        res.appointment.date = req.body.date;
    }
    if (req.body.time != null) {
        res.appointment.time = req.body.time;
    }
    try {
        const updatedAppointment = await res.appointment.save();
        res.json(updatedAppointment);
    } catch (err) {
        res.status(400).json({
            message: err.message
        });
    }
});

// Delete one appointment
router.delete('/:id', getAppointment, async (req, res) => {
    try {
        await res.appointment.remove();
        res.json({
            message: 'Deleted Appointment'
        });
    } catch (err) {
        res.status(500).json({
            message: err.message
        });
    }
});

async function getAppointment(req, res, next) {
    try {
        appointment = await Appointment.findById(req.params.id).populate('service').populate('professional').populate('client');
        if (appointment == null) {
            return res.status(404).json({
                message: 'Cannot find appointment'
            });
        }
    } catch (err) {
        return res.status(500).json({
            message: err.message
        });
    }
    res.appointment = appointment;
    next();
}

module.exports = router;

const express = require('express');
const router = express.Router();
const Professional = require('../models/professional');
const Service = require('../models/service');

// Get all professionals
router.get('/', async (req, res) => {
    try {
        const professionals = await Professional.find().populate('services');
        res.json(professionals);
    } catch (err) {
        res.status(500).json({
            message: err.message
        });
    }
});

// Get one professional
router.get('/:id', getProfessional, (req, res) => {
    res.json(res.professional);
});

// Create one professional
router.post('/', async (req, res) => {
    const services = await Service.find({
        _id: {
            $in: req.body.services
        }
    });
    const professional = new Professional({
        name: req.body.name,
        description: req.body.description,
        skills: req.body.skills,
        services: services
    });
    try {
        const newProfessional = await professional.save();
        res.status(201).json(newProfessional);
    } catch (err) {
        res.status(400).json({
            message: err.message
        });
    }
});

// Update one professional
router.patch('/:id', getProfessional, async (req, res) => {
    if (req.body.name != null) {
        res.professional.name = req.body.name;
    }
    if (req.body.description != null) {
        res.professional.description = req.body.description;
    }
    if (req.body.skills != null) {
        res.professional.skills = req.body.skills;
    }
    if (req.body.services != null) {
        const services = await Service.find({
            _id: {
                $in: req.body.services
            }
        });
        res.professional.services = services;
    }
    try {
        const updatedProfessional = await res.professional.save();
        res.json(updatedProfessional);
    } catch (err) {
        res.status(400).json({
            message: err.message
        });
    }
});

// Delete one professional
router.delete('/:id', getProfessional, async (req, res) => {
    try {
        await res.professional.remove();
        res.json({
            message: 'Deleted Professional'
        });
    } catch (err) {
        res.status(500).json({
            message: err.message
        });
    }
});

async function getProfessional(req, res, next) {
    try {
        professional = await Professional.findById(req.params.id).populate('services');
        if (professional == null) {
            return res.status(404).json({
                message: 'Cannot find professional'
            });
        }
    } catch (err) {
        return res.status(500).json({
            message: err.message
        });
    }
    res.professional = professional;
    next();
}

module.exports = router;


const express = require('express');
const router = express.Router();
const User = require('../models/user');

// Get all users
router.get('/', async (req, res) => {
    try {
        const users = await User.find();
        res.json(users);
    } catch (err) {
        res.status(500).json({
            message: err.message
        });
    }
});

// Get one user
router.get('/:id', getUser, (req, res) => {
    res.json(res.user);
});

// Create one user
router.post('/', async (req, res) => {
    const user = new User({
        name: req.body.name,
        email: req.body.email,
        password: req.body.password
    });
    try {
        const newUser = await user.save();
        res.status(201).json(newUser);
    } catch (err) {
        res.status(400).json({
            message: err.message
        });
    }
});

// Update one user
router.patch('/:id', getUser, async (req, res) => {
    if (req.body.name != null) {
        res.user.name = req.body.name;
    }
    if (req.body.email != null) {
        res.user.email = req.body.email;
    }
    if (req.body.password != null) {
        res.user.password = req.body.password;
    }
    try {
        const updatedUser = await res.user.save();
        res.json(updatedUser);
    } catch (err) {
        res.status(400).json({
            message: err.message
        });
    }
});

// Delete one user
router.delete('/:id', getUser, async (req, res) => {
    try {
        await res.user.remove();
        res.json({
            message: 'Deleted User'
        });
    } catch (err) {
        res.status(500).json({
            message: err.message
        });
    }
});

async function getUser(req, res, next) {
    try {
        user = await User.findById(req.params.id);
        if (user == null) {
            return res.status(404).json({
                message: 'Cannot find user'
            });
        }
    } catch (err) {
        return res.status(500).json({
            message: err.message
        });
    }
    res.user = user;
    next();
}


const express = require('express');
const router = express.Router();
const Payment = require('../models/payment');
const Service = require('../models/service');
const Professional = require('../models/professional');
const User = require('../models/user');

// Get all payments
router.get('/', async (req, res) => {
    try {
        const payments = await Payment.find().populate('service').populate('professional').populate('client');
        res.json(payments);
    } catch (err) {
        res.status(500).json({
            message: err.message
        });
    }
});

// Get one payment
router.get('/:id', getPayment, (req, res) => {
    res.json(res.payment);
});

// Create one payment
router.post('/', async (req, res) => {
    const service = await Service.findById(req.body.service);
    const professional = await Professional.findById(req.body.professional);
    const client = await User.findById(req.body.client);
    const payment = new Payment({
        service: service,
        professional: professional,
        client: client,
        date: req.body.date,
        amount: req.body.amount
    });
    try {
        const newPayment = await payment.save();
        res.status(201).json(newPayment);
    } catch (err) {
        res.status(400).json({
            message: err.message
        });
    }
});

// Update one payment
router.patch('/:id', getPayment, async (req, res) => {
    if (req.body.date != null) {
        res.payment.date = req.body.date;
    }
    if (req.body.amount != null) {
        res.payment.amount = req.body.amount;
    }
    try {
        const updatedPayment = await res.payment.save();
        res.json(updatedPayment);
    } catch (err) {
        res.status(400).json({
            message: err.message
        });
    }
});

// Delete one payment
router.delete('/:id', getPayment, async (req, res) => {
    try {
        await res.payment.remove();
        res.json({
            message: 'Deleted Payment'
        });
    } catch (err) {
        res.status(500).json({
            message: err.message
        });
    }
});

async function getPayment(req, res, next) {
    try {
        payment = await Payment.findById(req.params.id).populate('service').populate('professional').populate('client');
        if (payment == null) {
            return res.status(404).json({
                message: 'Cannot find payment'
            });
        }
    } catch (err) {
        return res.status(500).json({
            message: err.message
        });
    }
    res.payment = payment;
    next();
}


/*The relationships between these models could be as follows:

A professional can offer multiple services, so there would be a many-to-many relationship between the Professional and Service models.
A professional can have multiple appointments, so there would be a one-to-many relationship between the Professional and Appointment models.
A service can have multiple appointments, so there would be a one-to-many relationship between the Service and Appointment models.
A client can have multiple appointments, so there would be a one-to-many relationship between the User and Appointment models.
A client can have multiple payments, so there would be a one-to-many relationship between the User and Payment models.
A service can have multiple payments, so there would be a one-to-many relationship between the Service and Payment models.
A professional can have multiple payments, so there would be a one - to - many relationship between the Professional and Payment models.*/